;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :ogre)

(define-foreign-library libllcoi
    (:unix (:or "libllcoi.so.3" "libllcoi.so"))
    (t (:default "libllcoi")))

(defun load-foreign-libraries ()
  (use-foreign-library libllcoi)
  (format t "~&[ogre] foreign library libllcoi loaded~%"))


(load-foreign-libraries)

(in-package :ogre)




;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


#+sbcl(sb-ext::set-floating-point-modes :traps nil)


(cffi:defcenum #.(swig-lispify "OgreLightTypes" 'enumname)
	#.(swig-lispify "LT_POINT" 'enumvalue :keyword)
	#.(swig-lispify "LT_DIRECTIONAL" 'enumvalue :keyword)
	#.(swig-lispify "LT_SPOTLIGHT" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "OgreLightTypes" 'enumname))

(cffi:defcenum #.(swig-lispify "OgreShadowTechnique" 'enumname)
	(#.(swig-lispify "SHADOWTYPE_NONE" 'enumvalue :keyword) #.#x00)
	(#.(swig-lispify "SHADOWDETAILTYPE_ADDITIVE" 'enumvalue :keyword) #.#x01)
	(#.(swig-lispify "SHADOWDETAILTYPE_MODULATIVE" 'enumvalue :keyword) #.#x02)
	(#.(swig-lispify "SHADOWDETAILTYPE_INTEGRATED" 'enumvalue :keyword) #.#x04)
	(#.(swig-lispify "SHADOWDETAILTYPE_STENCIL" 'enumvalue :keyword) #.#x10)
	(#.(swig-lispify "SHADOWDETAILTYPE_TEXTURE" 'enumvalue :keyword) #.#x20)
	(#.(swig-lispify "SHADOWTYPE_STENCIL_MODULATIVE" 'enumvalue :keyword) #.#x12)
	(#.(swig-lispify "SHADOWTYPE_STENCIL_ADDITIVE" 'enumvalue :keyword) #.#x11)
	(#.(swig-lispify "SHADOWTYPE_TEXTURE_MODULATIVE" 'enumvalue :keyword) #.#x22)
	(#.(swig-lispify "SHADOWTYPE_TEXTURE_ADDITIVE" 'enumvalue :keyword) #.#x21)
	(#.(swig-lispify "SHADOWTYPE_TEXTURE_ADDITIVE_INTEGRATED" 'enumvalue :keyword) #.#x25)
	(#.(swig-lispify "SHADOWTYPE_TEXTURE_MODULATIVE_INTEGRATED" 'enumvalue :keyword) #.#x26))

(cl:export '#.(swig-lispify "OgreShadowTechnique" 'enumname))

(cffi:defcenum #.(swig-lispify "OgreTerrainAlignment" 'enumname)
	(#.(swig-lispify "ALIGN_X_Z" 'enumvalue :keyword) #.0)
	(#.(swig-lispify "ALIGN_X_Y" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "ALIGN_Y_Z" 'enumvalue :keyword) #.2))

(cl:export '#.(swig-lispify "OgreTerrainAlignment" 'enumname))

(cffi:defcenum #.(swig-lispify "OgreRenderOperationType" 'enumname)
	(#.(swig-lispify "OT_POINT_LIST" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "OT_LINE_LIST" 'enumvalue :keyword) #.2)
	(#.(swig-lispify "OT_LINE_STRIP" 'enumvalue :keyword) #.3)
	(#.(swig-lispify "OT_TRIANGLE_LIST" 'enumvalue :keyword) #.4)
	(#.(swig-lispify "OT_TRIANGLE_STRIP" 'enumvalue :keyword) #.5)
	(#.(swig-lispify "OT_TRIANGLE_FAN" 'enumvalue :keyword) #.6))

(cl:export '#.(swig-lispify "OgreRenderOperationType" 'enumname))

(cl:defconstant #.(swig-lispify "EVENT_FRAME_STARTED" 'constant) 1)

(cl:export '#.(swig-lispify "EVENT_FRAME_STARTED" 'constant))

(cl:defconstant #.(swig-lispify "EVENT_FRAME_RENDERING_QUEUED" 'constant) 2)

(cl:export '#.(swig-lispify "EVENT_FRAME_RENDERING_QUEUED" 'constant))

(cl:defconstant #.(swig-lispify "EVENT_FRAME_ENDED" 'constant) 4)

(cl:export '#.(swig-lispify "EVENT_FRAME_ENDED" 'constant))

(cffi:defcstruct #.(swig-lispify "coiQuaternion" 'classname)
	(#.(swig-lispify "w" 'slotname) :float)
	(#.(swig-lispify "x" 'slotname) :float)
	(#.(swig-lispify "y" 'slotname) :float)
	(#.(swig-lispify "z" 'slotname) :float))

(cl:export '#.(swig-lispify "coiQuaternion" 'classname))

(cl:export '#.(swig-lispify "w" 'slotname))

(cl:export '#.(swig-lispify "x" 'slotname))

(cl:export '#.(swig-lispify "y" 'slotname))

(cl:export '#.(swig-lispify "z" 'slotname))

(cffi:defcstruct #.(swig-lispify "coiVector3" 'classname)
	(#.(swig-lispify "x" 'slotname) :float)
	(#.(swig-lispify "y" 'slotname) :float)
	(#.(swig-lispify "z" 'slotname) :float))

(cl:export '#.(swig-lispify "coiVector3" 'classname))

(cl:export '#.(swig-lispify "x" 'slotname))

(cl:export '#.(swig-lispify "y" 'slotname))

(cl:export '#.(swig-lispify "z" 'slotname))

(cffi:defcstruct #.(swig-lispify "coiColourValue" 'classname)
	(#.(swig-lispify "r" 'slotname) :float)
	(#.(swig-lispify "g" 'slotname) :float)
	(#.(swig-lispify "b" 'slotname) :float)
	(#.(swig-lispify "a" 'slotname) :float))

(cl:export '#.(swig-lispify "coiColourValue" 'classname))

(cl:export '#.(swig-lispify "r" 'slotname))

(cl:export '#.(swig-lispify "g" 'slotname))

(cl:export '#.(swig-lispify "b" 'slotname))

(cl:export '#.(swig-lispify "a" 'slotname))

(cffi:defcstruct #.(swig-lispify "engine_options" 'classname)
	(#.(swig-lispify "renderer_s" 'slotname) :string)
	(#.(swig-lispify "plugin_folder_s" 'slotname) :string)
	(#.(swig-lispify "window_title" 'slotname) :string)
	(#.(swig-lispify "log_name" 'slotname) :string)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int)
	(#.(swig-lispify "auto_window" 'slotname) :int))

(cl:export '#.(swig-lispify "engine_options" 'classname))

(cl:export '#.(swig-lispify "renderer_s" 'slotname))

(cl:export '#.(swig-lispify "plugin_folder_s" 'slotname))

(cl:export '#.(swig-lispify "window_title" 'slotname))

(cl:export '#.(swig-lispify "log_name" 'slotname))

(cl:export '#.(swig-lispify "width" 'slotname))

(cl:export '#.(swig-lispify "height" 'slotname))

(cl:export '#.(swig-lispify "auto_window" 'slotname))

(cffi:defcfun ("release_engine" #.(swig-lispify "release_engine" 'function)) :void)

(cl:export '#.(swig-lispify "release_engine" 'function))

(cffi:defcfun ("default_engine_options" #.(swig-lispify "default_engine_options" 'function)) :void
  (options :pointer))

(cl:export '#.(swig-lispify "default_engine_options" 'function))

(cffi:defcfun ("init_engine" #.(swig-lispify "init_engine" 'function)) :void
  (options #.(swig-lispify "engine_options" 'classname)))

(cl:export '#.(swig-lispify "init_engine" 'function))

(cffi:defcfun ("create_root" #.(swig-lispify "create_root" 'function)) :pointer
  (pluginFileName :string)
  (configFileName :string)
  (logFileName :string))

(cl:export '#.(swig-lispify "create_root" 'function))

(cffi:defcfun ("root_initialise" #.(swig-lispify "root_initialise" 'function)) :pointer
  (auto_create_window :int)
  (render_window_title :string))

(cl:export '#.(swig-lispify "root_initialise" 'function))

(cffi:defcfun ("root_is_initialised" #.(swig-lispify "root_is_initialised" 'function)) :int)

(cl:export '#.(swig-lispify "root_is_initialised" 'function))

(cffi:defcfun ("save_config" #.(swig-lispify "save_config" 'function)) :void)

(cl:export '#.(swig-lispify "save_config" 'function))

(cffi:defcfun ("restore_config" #.(swig-lispify "restore_config" 'function)) :int)

(cl:export '#.(swig-lispify "restore_config" 'function))

(cffi:defcfun ("show_config_dialog" #.(swig-lispify "show_config_dialog" 'function)) :int)

(cl:export '#.(swig-lispify "show_config_dialog" 'function))

(cffi:defcfun ("load_ogre_plugin" #.(swig-lispify "load_ogre_plugin" 'function)) :void
  (plugin :string))

(cl:export '#.(swig-lispify "load_ogre_plugin" 'function))

(cffi:defcfun ("render_one_frame" #.(swig-lispify "render_one_frame" 'function)) :int)

(cl:export '#.(swig-lispify "render_one_frame" 'function))

(cffi:defcfun ("render_one_frame_ex" #.(swig-lispify "render_one_frame_ex" 'function)) :int
  (time_since_last_frame :float))

(cl:export '#.(swig-lispify "render_one_frame_ex" 'function))

(cffi:defcfun ("render_loop_once" #.(swig-lispify "render_loop_once" 'function)) :int)

(cl:export '#.(swig-lispify "render_loop_once" 'function))

(cffi:defcfun ("render_loop" #.(swig-lispify "render_loop" 'function)) :void)

(cl:export '#.(swig-lispify "render_loop" 'function))

(cffi:defcfun ("pump_messages" #.(swig-lispify "pump_messages" 'function)) :void)

(cl:export '#.(swig-lispify "pump_messages" 'function))

(cffi:defcfun ("log_message" #.(swig-lispify "log_message" 'function)) :void
  (message :string))

(cl:export '#.(swig-lispify "log_message" 'function))

(cffi:defcfun ("set_default_num_mipmaps" #.(swig-lispify "set_default_num_mipmaps" 'function)) :void
  (number :int))

(cl:export '#.(swig-lispify "set_default_num_mipmaps" 'function))

(cffi:defcenum #.(swig-lispify "KeyCode" 'enumname)
	(#.(swig-lispify "KC_UNASSIGNED" 'enumvalue :keyword) #.#x00)
	(#.(swig-lispify "KC_ESCAPE" 'enumvalue :keyword) #.#x01)
	(#.(swig-lispify "KC_1" 'enumvalue :keyword) #.#x02)
	(#.(swig-lispify "KC_2" 'enumvalue :keyword) #.#x03)
	(#.(swig-lispify "KC_3" 'enumvalue :keyword) #.#x04)
	(#.(swig-lispify "KC_4" 'enumvalue :keyword) #.#x05)
	(#.(swig-lispify "KC_5" 'enumvalue :keyword) #.#x06)
	(#.(swig-lispify "KC_6" 'enumvalue :keyword) #.#x07)
	(#.(swig-lispify "KC_7" 'enumvalue :keyword) #.#x08)
	(#.(swig-lispify "KC_8" 'enumvalue :keyword) #.#x09)
	(#.(swig-lispify "KC_9" 'enumvalue :keyword) #.#x0A)
	(#.(swig-lispify "KC_0" 'enumvalue :keyword) #.#x0B)
	(#.(swig-lispify "KC_MINUS" 'enumvalue :keyword) #.#x0C)
	(#.(swig-lispify "KC_EQUALS" 'enumvalue :keyword) #.#x0D)
	(#.(swig-lispify "KC_BACK" 'enumvalue :keyword) #.#x0E)
	(#.(swig-lispify "KC_TAB" 'enumvalue :keyword) #.#x0F)
	(#.(swig-lispify "KC_Q" 'enumvalue :keyword) #.#x10)
	(#.(swig-lispify "KC_W" 'enumvalue :keyword) #.#x11)
	(#.(swig-lispify "KC_E" 'enumvalue :keyword) #.#x12)
	(#.(swig-lispify "KC_R" 'enumvalue :keyword) #.#x13)
	(#.(swig-lispify "KC_T" 'enumvalue :keyword) #.#x14)
	(#.(swig-lispify "KC_Y" 'enumvalue :keyword) #.#x15)
	(#.(swig-lispify "KC_U" 'enumvalue :keyword) #.#x16)
	(#.(swig-lispify "KC_I" 'enumvalue :keyword) #.#x17)
	(#.(swig-lispify "KC_O" 'enumvalue :keyword) #.#x18)
	(#.(swig-lispify "KC_P" 'enumvalue :keyword) #.#x19)
	(#.(swig-lispify "KC_LBRACKET" 'enumvalue :keyword) #.#x1A)
	(#.(swig-lispify "KC_RBRACKET" 'enumvalue :keyword) #.#x1B)
	(#.(swig-lispify "KC_RETURN" 'enumvalue :keyword) #.#x1C)
	(#.(swig-lispify "KC_LCONTROL" 'enumvalue :keyword) #.#x1D)
	(#.(swig-lispify "KC_A" 'enumvalue :keyword) #.#x1E)
	(#.(swig-lispify "KC_S" 'enumvalue :keyword) #.#x1F)
	(#.(swig-lispify "KC_D" 'enumvalue :keyword) #.#x20)
	(#.(swig-lispify "KC_F" 'enumvalue :keyword) #.#x21)
	(#.(swig-lispify "KC_G" 'enumvalue :keyword) #.#x22)
	(#.(swig-lispify "KC_H" 'enumvalue :keyword) #.#x23)
	(#.(swig-lispify "KC_J" 'enumvalue :keyword) #.#x24)
	(#.(swig-lispify "KC_K" 'enumvalue :keyword) #.#x25)
	(#.(swig-lispify "KC_L" 'enumvalue :keyword) #.#x26)
	(#.(swig-lispify "KC_SEMICOLON" 'enumvalue :keyword) #.#x27)
	(#.(swig-lispify "KC_APOSTROPHE" 'enumvalue :keyword) #.#x28)
	(#.(swig-lispify "KC_GRAVE" 'enumvalue :keyword) #.#x29)
	(#.(swig-lispify "KC_LSHIFT" 'enumvalue :keyword) #.#x2A)
	(#.(swig-lispify "KC_BACKSLASH" 'enumvalue :keyword) #.#x2B)
	(#.(swig-lispify "KC_Z" 'enumvalue :keyword) #.#x2C)
	(#.(swig-lispify "KC_X" 'enumvalue :keyword) #.#x2D)
	(#.(swig-lispify "KC_C" 'enumvalue :keyword) #.#x2E)
	(#.(swig-lispify "KC_V" 'enumvalue :keyword) #.#x2F)
	(#.(swig-lispify "KC_B" 'enumvalue :keyword) #.#x30)
	(#.(swig-lispify "KC_N" 'enumvalue :keyword) #.#x31)
	(#.(swig-lispify "KC_M" 'enumvalue :keyword) #.#x32)
	(#.(swig-lispify "KC_COMMA" 'enumvalue :keyword) #.#x33)
	(#.(swig-lispify "KC_PERIOD" 'enumvalue :keyword) #.#x34)
	(#.(swig-lispify "KC_SLASH" 'enumvalue :keyword) #.#x35)
	(#.(swig-lispify "KC_RSHIFT" 'enumvalue :keyword) #.#x36)
	(#.(swig-lispify "KC_MULTIPLY" 'enumvalue :keyword) #.#x37)
	(#.(swig-lispify "KC_LMENU" 'enumvalue :keyword) #.#x38)
	(#.(swig-lispify "KC_SPACE" 'enumvalue :keyword) #.#x39)
	(#.(swig-lispify "KC_CAPITAL" 'enumvalue :keyword) #.#x3A)
	(#.(swig-lispify "KC_F1" 'enumvalue :keyword) #.#x3B)
	(#.(swig-lispify "KC_F2" 'enumvalue :keyword) #.#x3C)
	(#.(swig-lispify "KC_F3" 'enumvalue :keyword) #.#x3D)
	(#.(swig-lispify "KC_F4" 'enumvalue :keyword) #.#x3E)
	(#.(swig-lispify "KC_F5" 'enumvalue :keyword) #.#x3F)
	(#.(swig-lispify "KC_F6" 'enumvalue :keyword) #.#x40)
	(#.(swig-lispify "KC_F7" 'enumvalue :keyword) #.#x41)
	(#.(swig-lispify "KC_F8" 'enumvalue :keyword) #.#x42)
	(#.(swig-lispify "KC_F9" 'enumvalue :keyword) #.#x43)
	(#.(swig-lispify "KC_F10" 'enumvalue :keyword) #.#x44)
	(#.(swig-lispify "KC_NUMLOCK" 'enumvalue :keyword) #.#x45)
	(#.(swig-lispify "KC_SCROLL" 'enumvalue :keyword) #.#x46)
	(#.(swig-lispify "KC_NUMPAD7" 'enumvalue :keyword) #.#x47)
	(#.(swig-lispify "KC_NUMPAD8" 'enumvalue :keyword) #.#x48)
	(#.(swig-lispify "KC_NUMPAD9" 'enumvalue :keyword) #.#x49)
	(#.(swig-lispify "KC_SUBTRACT" 'enumvalue :keyword) #.#x4A)
	(#.(swig-lispify "KC_NUMPAD4" 'enumvalue :keyword) #.#x4B)
	(#.(swig-lispify "KC_NUMPAD5" 'enumvalue :keyword) #.#x4C)
	(#.(swig-lispify "KC_NUMPAD6" 'enumvalue :keyword) #.#x4D)
	(#.(swig-lispify "KC_ADD" 'enumvalue :keyword) #.#x4E)
	(#.(swig-lispify "KC_NUMPAD1" 'enumvalue :keyword) #.#x4F)
	(#.(swig-lispify "KC_NUMPAD2" 'enumvalue :keyword) #.#x50)
	(#.(swig-lispify "KC_NUMPAD3" 'enumvalue :keyword) #.#x51)
	(#.(swig-lispify "KC_NUMPAD0" 'enumvalue :keyword) #.#x52)
	(#.(swig-lispify "KC_DECIMAL" 'enumvalue :keyword) #.#x53)
	(#.(swig-lispify "KC_OEM_102" 'enumvalue :keyword) #.#x56)
	(#.(swig-lispify "KC_F11" 'enumvalue :keyword) #.#x57)
	(#.(swig-lispify "KC_F12" 'enumvalue :keyword) #.#x58)
	(#.(swig-lispify "KC_F13" 'enumvalue :keyword) #.#x64)
	(#.(swig-lispify "KC_F14" 'enumvalue :keyword) #.#x65)
	(#.(swig-lispify "KC_F15" 'enumvalue :keyword) #.#x66)
	(#.(swig-lispify "KC_KANA" 'enumvalue :keyword) #.#x70)
	(#.(swig-lispify "KC_ABNT_C1" 'enumvalue :keyword) #.#x73)
	(#.(swig-lispify "KC_CONVERT" 'enumvalue :keyword) #.#x79)
	(#.(swig-lispify "KC_NOCONVERT" 'enumvalue :keyword) #.#x7B)
	(#.(swig-lispify "KC_YEN" 'enumvalue :keyword) #.#x7D)
	(#.(swig-lispify "KC_ABNT_C2" 'enumvalue :keyword) #.#x7E)
	(#.(swig-lispify "KC_NUMPADEQUALS" 'enumvalue :keyword) #.#x8D)
	(#.(swig-lispify "KC_PREVTRACK" 'enumvalue :keyword) #.#x90)
	(#.(swig-lispify "KC_AT" 'enumvalue :keyword) #.#x91)
	(#.(swig-lispify "KC_COLON" 'enumvalue :keyword) #.#x92)
	(#.(swig-lispify "KC_UNDERLINE" 'enumvalue :keyword) #.#x93)
	(#.(swig-lispify "KC_KANJI" 'enumvalue :keyword) #.#x94)
	(#.(swig-lispify "KC_STOP" 'enumvalue :keyword) #.#x95)
	(#.(swig-lispify "KC_AX" 'enumvalue :keyword) #.#x96)
	(#.(swig-lispify "KC_UNLABELED" 'enumvalue :keyword) #.#x97)
	(#.(swig-lispify "KC_NEXTTRACK" 'enumvalue :keyword) #.#x99)
	(#.(swig-lispify "KC_NUMPADENTER" 'enumvalue :keyword) #.#x9C)
	(#.(swig-lispify "KC_RCONTROL" 'enumvalue :keyword) #.#x9D)
	(#.(swig-lispify "KC_MUTE" 'enumvalue :keyword) #.#xA0)
	(#.(swig-lispify "KC_CALCULATOR" 'enumvalue :keyword) #.#xA1)
	(#.(swig-lispify "KC_PLAYPAUSE" 'enumvalue :keyword) #.#xA2)
	(#.(swig-lispify "KC_MEDIASTOP" 'enumvalue :keyword) #.#xA4)
	(#.(swig-lispify "KC_VOLUMEDOWN" 'enumvalue :keyword) #.#xAE)
	(#.(swig-lispify "KC_VOLUMEUP" 'enumvalue :keyword) #.#xB0)
	(#.(swig-lispify "KC_WEBHOME" 'enumvalue :keyword) #.#xB2)
	(#.(swig-lispify "KC_NUMPADCOMMA" 'enumvalue :keyword) #.#xB3)
	(#.(swig-lispify "KC_DIVIDE" 'enumvalue :keyword) #.#xB5)
	(#.(swig-lispify "KC_SYSRQ" 'enumvalue :keyword) #.#xB7)
	(#.(swig-lispify "KC_RMENU" 'enumvalue :keyword) #.#xB8)
	(#.(swig-lispify "KC_PAUSE" 'enumvalue :keyword) #.#xC5)
	(#.(swig-lispify "KC_HOME" 'enumvalue :keyword) #.#xC7)
	(#.(swig-lispify "KC_UP" 'enumvalue :keyword) #.#xC8)
	(#.(swig-lispify "KC_PGUP" 'enumvalue :keyword) #.#xC9)
	(#.(swig-lispify "KC_LEFT" 'enumvalue :keyword) #.#xCB)
	(#.(swig-lispify "KC_RIGHT" 'enumvalue :keyword) #.#xCD)
	(#.(swig-lispify "KC_END" 'enumvalue :keyword) #.#xCF)
	(#.(swig-lispify "KC_DOWN" 'enumvalue :keyword) #.#xD0)
	(#.(swig-lispify "KC_PGDOWN" 'enumvalue :keyword) #.#xD1)
	(#.(swig-lispify "KC_INSERT" 'enumvalue :keyword) #.#xD2)
	(#.(swig-lispify "KC_DELETE" 'enumvalue :keyword) #.#xD3)
	(#.(swig-lispify "KC_LWIN" 'enumvalue :keyword) #.#xDB)
	(#.(swig-lispify "KC_RWIN" 'enumvalue :keyword) #.#xDC)
	(#.(swig-lispify "KC_APPS" 'enumvalue :keyword) #.#xDD)
	(#.(swig-lispify "KC_POWER" 'enumvalue :keyword) #.#xDE)
	(#.(swig-lispify "KC_SLEEP" 'enumvalue :keyword) #.#xDF)
	(#.(swig-lispify "KC_WAKE" 'enumvalue :keyword) #.#xE3)
	(#.(swig-lispify "KC_WEBSEARCH" 'enumvalue :keyword) #.#xE5)
	(#.(swig-lispify "KC_WEBFAVORITES" 'enumvalue :keyword) #.#xE6)
	(#.(swig-lispify "KC_WEBREFRESH" 'enumvalue :keyword) #.#xE7)
	(#.(swig-lispify "KC_WEBSTOP" 'enumvalue :keyword) #.#xE8)
	(#.(swig-lispify "KC_WEBFORWARD" 'enumvalue :keyword) #.#xE9)
	(#.(swig-lispify "KC_WEBBACK" 'enumvalue :keyword) #.#xEA)
	(#.(swig-lispify "KC_MYCOMPUTER" 'enumvalue :keyword) #.#xEB)
	(#.(swig-lispify "KC_MAIL" 'enumvalue :keyword) #.#xEC)
	(#.(swig-lispify "KC_MEDIASELECT" 'enumvalue :keyword) #.#xED))

(cl:export '#.(swig-lispify "KeyCode" 'enumname))

(cffi:defcenum #.(swig-lispify "MouseButtonID" 'enumname)
	(#.(swig-lispify "MB_Left" 'enumvalue :keyword) #.0)
	#.(swig-lispify "MB_Right" 'enumvalue :keyword)
	#.(swig-lispify "MB_Middle" 'enumvalue :keyword)
	#.(swig-lispify "MB_Button3" 'enumvalue :keyword)
	#.(swig-lispify "MB_Button4" 'enumvalue :keyword)
	#.(swig-lispify "MB_Button5" 'enumvalue :keyword)
	#.(swig-lispify "MB_Button6" 'enumvalue :keyword)
	#.(swig-lispify "MB_Button7" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "MouseButtonID" 'enumname))

(cffi:defcstruct #.(swig-lispify "KeyEvent" 'classname)
	(#.(swig-lispify "key" 'slotname) #.(swig-lispify "KeyCode" 'enumname))
	(#.(swig-lispify "text" 'slotname) :unsigned-int))

(cl:export '#.(swig-lispify "KeyEvent" 'classname))

(cl:export '#.(swig-lispify "key" 'slotname))

(cl:export '#.(swig-lispify "text" 'slotname))

(cffi:defcenum #.(swig-lispify "Key_Modifier" 'enumname)
	(#.(swig-lispify "Shift" 'enumvalue :keyword) #.#x0000001)
	(#.(swig-lispify "Ctrl" 'enumvalue :keyword) #.#x0000010)
	(#.(swig-lispify "Alt" 'enumvalue :keyword) #.#x0000100))

(cl:export '#.(swig-lispify "Key_Modifier" 'enumname))

(cffi:defcstruct #.(swig-lispify "Axis" 'classname)
	(#.(swig-lispify "abs" 'slotname) :int)
	(#.(swig-lispify "rel" 'slotname) :int)
	(#.(swig-lispify "absOnly" 'slotname) :int))

(cl:export '#.(swig-lispify "Axis" 'classname))

(cl:export '#.(swig-lispify "abs" 'slotname))

(cl:export '#.(swig-lispify "rel" 'slotname))

(cl:export '#.(swig-lispify "absOnly" 'slotname))

(cffi:defcstruct #.(swig-lispify "MouseState" 'classname)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int)
	(#.(swig-lispify "X" 'slotname) #.(swig-lispify "Axis" 'classname))
	(#.(swig-lispify "Y" 'slotname) #.(swig-lispify "Axis" 'classname))
	(#.(swig-lispify "Z" 'slotname) #.(swig-lispify "Axis" 'classname))
	(#.(swig-lispify "buttons" 'slotname) :int))

(cl:export '#.(swig-lispify "MouseState" 'classname))

(cl:export '#.(swig-lispify "width" 'slotname))

(cl:export '#.(swig-lispify "height" 'slotname))

(cl:export '#.(swig-lispify "X" 'slotname))

(cl:export '#.(swig-lispify "Y" 'slotname))

(cl:export '#.(swig-lispify "Z" 'slotname))

(cl:export '#.(swig-lispify "buttons" 'slotname))

(cffi:defcfun ("create_input_system" #.(swig-lispify "create_input_system" 'function)) :void
  (window_handle :unsigned-int))

(cl:export '#.(swig-lispify "create_input_system" 'function))

(cffi:defcfun ("destroy_input_system" #.(swig-lispify "destroy_input_system" 'function)) :void)

(cl:export '#.(swig-lispify "destroy_input_system" 'function))

(cffi:defcfun ("create_mouse_object" #.(swig-lispify "create_mouse_object" 'function)) :pointer
  (buffered :int))

(cl:export '#.(swig-lispify "create_mouse_object" 'function))

(cffi:defcfun ("create_keyboard_object" #.(swig-lispify "create_keyboard_object" 'function)) :pointer
  (buffered :int))

(cl:export '#.(swig-lispify "create_keyboard_object" 'function))

(cffi:defcfun ("destroy_mouse_object" #.(swig-lispify "destroy_mouse_object" 'function)) :void
  (mouse_handle :pointer))

(cl:export '#.(swig-lispify "destroy_mouse_object" 'function))

(cffi:defcfun ("destroy_keyboard_object" #.(swig-lispify "destroy_keyboard_object" 'function)) :void
  (keyboard_handle :pointer))

(cl:export '#.(swig-lispify "destroy_keyboard_object" 'function))

(cffi:defcfun ("keyboard_is_key_down" #.(swig-lispify "keyboard_is_key_down" 'function)) :int
  (keyboard_handle :pointer)
  (key_code #.(swig-lispify "KeyCode" 'enumname)))

(cl:export '#.(swig-lispify "keyboard_is_key_down" 'function))

(cffi:defcfun ("keyboard_is_modifier_down" #.(swig-lispify "keyboard_is_modifier_down" 'function)) :int
  (keyboard_handle :pointer)
  (key_modifier #.(swig-lispify "Key_Modifier" 'enumname)))

(cl:export '#.(swig-lispify "keyboard_is_modifier_down" 'function))

(cffi:defcfun ("mouse_get_state" #.(swig-lispify "mouse_get_state" 'function)) #.(swig-lispify "MouseState" 'classname)
  (mouse_handle :pointer))

(cl:export '#.(swig-lispify "mouse_get_state" 'function))

(cffi:defcfun ("mouse_set_buffered" #.(swig-lispify "mouse_set_buffered" 'function)) :void
  (mouse_handle :pointer)
  (buffered :int))

(cl:export '#.(swig-lispify "mouse_set_buffered" 'function))

(cffi:defcfun ("keyboard_set_buffered" #.(swig-lispify "keyboard_set_buffered" 'function)) :void
  (keyboard_handle :pointer)
  (buffered :int))

(cl:export '#.(swig-lispify "keyboard_set_buffered" 'function))

(cffi:defcfun ("keyboard_capture" #.(swig-lispify "keyboard_capture" 'function)) :void
  (keyboard_handle :pointer))

(cl:export '#.(swig-lispify "keyboard_capture" 'function))

(cffi:defcfun ("mouse_capture" #.(swig-lispify "mouse_capture" 'function)) :void
  (mouse_handle :pointer))

(cl:export '#.(swig-lispify "mouse_capture" 'function))


